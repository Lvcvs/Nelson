#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys
import time
import socket
import requests
from datetime import datetime
### Stealth mode
from logging import getLogger, ERROR
getLogger("scapy.runtime").setLevel(ERROR)
from scapy.all import *

normal = '\033[0m'
red = '\033[1;31m'
bright_green = '\033[1;32m'
bright_yellow = '\033[1;33m'

def final():
    import nelson as n
    n.main()

# in caso di un output troppo lungo questo aumenta le dimensioni del terminale
def check_len_message(message):
    columns = os.popen('stty size', 'r').read().split()[1]
    colors = ['\033[0m','\033[1;31m','\033[4m','\033[1;32m','\033[1;33m']

    for e in colors:
        if e in message:
            message = message.replace(e,"")

    if int(len(message)) >= int(columns):
        columns = int(len(message)) + 1
        sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=columns)) # grandezza terminale

PORTSCAN_NEXT_TARGET = False

# Porte + usate:
PORTS_DEFAULT = [0,1,2,3,7,8,9,13,17,19,20,21,22,23,25,53,67,68,69,70,79,80,88,104,110,111,113,119,123,137,138,139,143,161,162,389,411,443,445,465,502,514,554,563,587,591,631,636,666,843,993,995,1080,1194,1234,1433,1434,1984,2049,2101,2121,2761,2762,3050,3128,3306,3389,3541,3542,3690,4444,4662,4672,4711,4899,5000,5060,5084,5085,5190,5222,5269,5432,5555,5631,5632,5800,5900,6000,6566,6667,7000,8000,8080,8888,9876,9900,10000,41951,49152]

# Porte + usate + meno comuni
PORTS_ALL = [0,1,2,3,5,7,8,9,11,13,15,17,18,19,20,21,22,23,25,26,37,38,39,42,43,47,49,50,51,52,53,54,56,57,58,61,67,68,69,70,71,72,73,74,75,77,79,80,81,82,87,88,90,99,100,101,102,104,105,106,107,108,109,110,111,112,113,115,117,118,119,120,123,126,135,136,137,138,139,143,144,152,153,156,158,161,162,170,177,179,192,194,199,201,207,209,210,213,217,218,220,222,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,249,250,251,252,253,254,255,259,262,264,280,300,308,311,318,319,320,350,351,356,363,366,369,370,371,383,384,387,389,399,401,402,407,411,427,433,434,443,444,445,464,465,475,491,497,500,502,504,510,512,513,514,515,517,518,520,521,524,525,530,532,533,539,540,542,543,544,547,548,550,554,556,559,560,561,563,564,585,587,591,593,601,604,623,625,626,631,635,636,639,641,643,646,647,648,651,653,654,655,657,660,664,666,674,682,683,684,685,686,687,688,689,690,691,694,695,698,700,701,702,706,711,712,749,750,751,752,753,754,760,764,767,772,773,774,775,776,780,781,782,783,786,787,789,800,808,814,826,829,830,831,832,833,838,843,847,848,853,860,861,862,873,888,897,898,902,903,944,953,959,965,981,983,987,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1007,1008,1010,1011,1012,1013,1014,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1053,1054,1055,1056,1057,1058,1059,1060,1064,1065,1066,1067,1068,1069,1070,1071,1072,1080,1081,1085,1087,1088,1090,1098,1099,1100,1101,1105,1109,1110,1119,1124,1167,1194,1198,1200,1214,1220,1234,1241,1270,1293,1311,1314,1337,1341,1344,1346,1352,1360,1414,1417,1418,1419,1420,1431,1433,1434,1455,1457,1484,1485,1492,1494,1500,1501,1513,1521,1524,1527,1533,1547,1550,1581,1582,1583,1589,1604,1626,1627,1628,1629,1645,1646,1666,1677,1688,1701,1707,1716,1718,1719,1720,1723,1755,1761,1782,1783,1801,1804,1812,1813,1880,1883,1885,1886,1900,1901,1935,1967,1970,1972,1984,1985,1993,1998,2000,2001,2002,2005,2010,2033,2048,2049,2051,2056,2080,2082,2083,2086,2087,2095,2096,2100,2101,2102,2103,2104,2105,2107,2110,2112,2111,2121,2122,2123,2142,2148,2152,2159,2160,2161,2181,2195,2196,2210,2211,2221,2222,2223,2224,2225,2226,2261,2262,2266,2302,2303,2305,2343,2345,2351,2362,2368,2369,2370,2372,2375,2376,2377,2379,2380,2383,2399,2401,2404,2424,2427,2447,2480,2483,2484,2535,2541,2546,2547,2548,2593,2598,2599,2601,2638,2710,2717,2727,2761,2762,2809,2810,2811,2827,2869,2944,2945,2947,2948,2949,2967,3000,3001,3004,3020,3050,3052,3074,3101,3128,3130,3225,3233,3260,3268,3269,3283,3290,3296,3305,3306,3313,3316,3323,3332,3333,3343,3351,3386,3389,3396,3401,3412,3423,3424,3455,3456,3457,3659,3664,3478,3479,3480,3483,3493,3516,3527,3535,3541,3542,3544,3632,3645,3659,3667,3689,3690,3702,3703,3724,3725,3768,3784,3785,3799,3804,3825,3826,3830,3835,3856,3880,3868,3872,3900,3960,3962,3978,3979,3986,3999,4000,4001,4008,4018,4035,4045,4050,4069,4089,4090,4093,4096,4105,4111,4116,4125,4172,4190,4198,4201,4222,4226,4242,4243,4244,4303,4307,4321,4352,4444,4445,4486,4488,4500,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4560,4567,4569,4604,4605,4610,4611,4612,4613,4614,4615,4616,4517,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4662,4664,4666,4672,4711,4713,4728,4730,4739,4747,4750,4753,4789,4840,4843,4847,4894,4899,4949,4950,5000,5001,5002,5003,5009,5010,5050,5051,5060,5070,5084,5085,5093,5101,5104,5120,5121,5124,5125,5190,5222,5223,5228,5242,5269,5351,5353,5355,5357,5358,5432,5500,5555,5631,5632,5666,5723,5800,5900,5901,6000,6001,6002,6004,6050,6112,6346,6347,6566,6646,6667,6970,6971,7000,7070,7937,7938,8000,8001,8008,8009,8010,8031,8080,8081,8181,8193,8443,8888,8900,9000,9001,9020,9090,9100,9102,9103,9199,9200,9370,9876,9877,9950,9900,9999,10000,10010,10080,11487,16086,16402,16430,16680,16832,16918,16947,17091,17185,17219,17455,17459,17573,17615,17616,17754,17888,17939,17989,18004,18234,18331,18360,18449,18582,18835,18888,18980,19017,19039,19120,19130,19165,19197,19283,19294,19315,19322,19332,19489,19503,19541,19600,19616,19682,19687,19933,20003,20004,20019,20031,20126,20359,20389,21000,21131,21212,21261,21298,21354,21383,21621,21800,21803,21847,21902,22055,22341,22692,22695,22739,22799,22846,22914,22986,22996,23040,23176,23354,23531,23557,23608,23679,23781,23965,23980,24007,24242,24279,24511,24594,24606,24644,24854,24910,25003,25157,25240,25280,25337,25375,25462,25541,25546,25709,25931,26407,26415,26720,26872,26966,27002,27007,27015,27195,27444,27473,27482,27707,27892,27899,28122,28369,28465,28493,28543,28547,28641,28840,28973,29078,29243,29256,29810,29823,29977,30260,30263,30303,30365,30544,30656,30697,30704,30718,30975,31059,31073,31109,31134,31137,31155,31162,31180,31189,31195,31199,31202,31261,31266,31267,31284,31334,31335,31337,31343,31350,31352,31361,31365,31404,31412,31428,31481,31520,31521,31560,31569,31584,31599,31602,31609,31625,31673,31681,31692,31720,31731,31732,31735,31743,31750,31783,31792,31794,31803,31852,31882,31887,31891,31918,31963,31999,32044,32053,32066,32124,32129,32132,32185,32216,32219,32262,32273,32326,32345,32352,32359,32368,32382,32385,32404,32415,32422,32425,32430,32446,32469,32479,32495,32499,32506,32528,32546,32607,32611,32727,32750,32760,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32798,32815,32818,32931,33030,33249,33281,33354,33355,33459,33717,33744,33866,33872,34038,34079,34125,34358,34422,34433,34555,34570,34577,34578,34579,34580,34758,34796,34855,34861,34862,34892,35438,35702,35777,35794,36108,36206,36384,36458,36489,36669,36778,36893,36945,37144,37212,37393,37444,37602,37761,37783,37813,37843,38037,38063,38293,38412,38498,38615,39213,39217,39632,39683,39714,39723,39888,40019,40116,40441,40539,40622,40708,40711,40724,40732,40805,40847,40866,40915,41058,41081,41308,41370,41446,41524,41638,41702,41774,41896,41951,41957,41967,41971,42056,42172,42313,42431,42434,42508,42557,42577,42627,42639,43094,43195,43370,43514,43686,43824,43967,44101,44160,44179,44185,44190,44253,44334,44508,44923,44946,44968,45247,45380,45441,45685,45722,45818,45928,46093,46532,46836,47624,47765,47772,47808,47915,47981,48078,48189,48255,48455,48489,48761,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49204,49205,49207,49208,49209,49210,49211,49212,49213,49214,49215,49216,49220,49222,49226,49259,49262,49306,49350,49360,49393,49396,49503,49640,49968,50000,50099,50164,50497,50612,50708,50919,51255,51456,51554,51586,51690,51717,51905,51972,52144,52225,52503,53006,53037,53571,53589,53838,54094,54114,54281,54321,54711,54807,54925,55043,55544,55587,56141,57172,57409,57410,57813,57843,57958,57977,58002,58075,58178,58419,58631,58640,58797,59193,59207,59765,59846,60172,60381,60423,61024,61142,61319,61322,61370,61412,61481,61550,61685,61961,62154,62287,62575,62677,62699,62958,63420,63555,64080,64481,64513,64590,64727,65024]

def progress(count, total): # percentuale caricamento
    percents = round(100.0 * count / float(total), 1)
    sys.stdout.write('{}% '.format(percents))
    sys.stdout.flush()

def portscan(ip,arg=None,targets=0,fast_scan=False):
    if arg == None and targets == 0:
        print("\n[#] Portscan\n")
        s_time = datetime.now().strftime('%H:%M:%S')
        print("[%s+%s] Avviato: %s\n"%(bright_green,normal, s_time))

    duration_start = time.time()

    socket.setdefaulttimeout(.1)
    opened = [] # porte aperte

    def results(intr):
        if len(opened) == 0:
            syntax = ""
            message = "[%s-%s] Nessuna porta aperta"%(red,normal)
        else:
            syntax = "> "
            message = "[%s+%s] Aperte: %s %s"%(bright_green,normal, len(opened), syntax)

        wol = False # verifica wake on lan

        for e in opened:
            if e == 7 or e == 9: # verifica wake on lan
                wol = True
            message += "[%s%s%s]"%(bright_green, e, normal)

        check_len_message(message)
        sys.stdout.write(message)

        if wol == True:
            print("\n[%s+%s] Wake on LAN disponibile\n"%(bright_green,normal))

        if wol == False:
            print("\n")

        if intr == True:
            print("[%s-%s] Interrotto\n"%(red,normal))
            final()

    analyzed = 0

    def scan(ip,port): # scansione
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        try:
            server.connect((ip, port))
            opened.append(port)
            server.close()
        except KeyboardInterrupt:
            server.close()
            print("")

            # Scelta azione se la scansione proviene dal comando netscan
            if arg == "netscan": # scelta azione
                results(False)
                try:
                    while True:
                        choice = raw_input("[#] Continuare (C) / Prossimo bersaglio (N) / Terminare (E)\n > ")

                        if choice.upper() == "N": # prossimo bersaglio
                            global PORTSCAN_NEXT_TARGET
                            PORTSCAN_NEXT_TARGET = True
                            break
                        elif choice.upper() == "C": # continuare la scansione
                            print("")
                            break
                        elif choice.upper() == "E": # interrompi
                            print("\n[%s-%s] Terminato\n"%(red,normal))
                            final()
                        else:
                            print("\n[%s-%s] Scelta non valida\n"%(red,normal))
                except (KeyboardInterrupt,EOFError): # ritorno al menu
                    print("")
                    final()
            else: # se l'argomento non è 'netscan'
                results(True)
        except:
            server.close()

    if "http://" in ip:
        ip = ip.replace("http://","")

    if "https://" in ip:
        ip = ip.replace("https://","")

    if arg != "netscan":
        print("[#] IP: %s"%(ip))

    if arg == "netscan":
        socket.setdefaulttimeout(.1)

    No_Results = False

    # scansione rapida
    PORTS = PORTS_ALL
    if fast_scan == True:
        PORTS = PORTS_DEFAULT

    # scansione porte
    for port in PORTS:
        try:
            scan(ip,port)
            analyzed += 1

            if arg == "netscan":
                global PORTSCAN_NEXT_TARGET
                if PORTSCAN_NEXT_TARGET == True:
                    PORTSCAN_NEXT_TARGET = False
                    No_Results = True
                    break
                else:
                    sys.stdout.write("\r[%s*%s] Porte %s/%s > "%(bright_yellow,normal, analyzed, len(PORTS)))
            else:
                sys.stdout.write("\r[%s*%s] Analizzate: %s/%s > "%(bright_yellow,normal, analyzed, len(PORTS)))

            progress(analyzed, total=len(PORTS))
            sys.stdout.flush()
        except KeyboardInterrupt:
            print("")
            results(True)

    print("")
    if No_Results == True:
        pass
    else:
        results(False)

        if arg == "netscan":
            pass
        else:
            duration_end = time.time()
            elapsed = round((duration_end - duration_start), 2)
            e_time = datetime.now().strftime('%H:%M:%S')

            print("[%s+%s] Terminato: %s"%(bright_green,normal, e_time))
            print("[%s*%s] Durata: %s secondi\n"%(bright_yellow,normal, elapsed))
